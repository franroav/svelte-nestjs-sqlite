name: Deploy to ECR

on:
  push:
    branches: [main]

env:
  AWS_ACCOUNT_NUMBER: ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}

jobs:
  build-and-push:
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint. New
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_SESSION_TOKEN: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"
          echo "AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-password: "false"
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Assume AWS Role
        id: assume-role
        run: |
          role_credentials=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}:role/github-actions-role --role-session-name GitHubActions | jq -r .Credentials)
          export AWS_ACCESS_KEY_ID=$(echo $role_credentials | jq -r .AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $role_credentials | jq -r .SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $role_credentials | jq -r .SessionToken)

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "false"

      - name: Debug Login Output
        run: |
          echo "ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}"
          echo "AWS_REGION: ${{ steps.login-ecr.outputs.region }}"

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./scripts/env/production/version.sh
          ./scripts/env/production/version.sh -v Hotfix
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com

      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t frontend-repo:latest${{ github.sha }} ./containers/frontend
          docker tag frontend-repo:latest${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/frontend-repo:latest${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/frontend-repo:latest${{ github.sha }}

      - name: Build and Push API Docker Image
        run: |
          docker build -t api-repo:latest${{ github.sha }} ./containers/api
          docker tag api-repo:latest${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/api-repo:latest${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/api-repo:latest${{ github.sha }}

  deploy:
    name: Deploy to AWS
    needs: build-and-push
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint. New
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-password: "false"
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Assume AWS Role
        id: assume-role
        run: |
          role_credentials=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}:role/github-actions-role --role-session-name GitHubActions | jq -r .Credentials)
          export AWS_ACCESS_KEY_ID=$(echo $role_credentials | jq -r .AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $role_credentials | jq -r .SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $role_credentials | jq -r .SessionToken)

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "false"
          region: us-east-1

      - name: Debug Login Output
        run: |
          echo "ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}"
          echo "AWS_REGION: ${{ steps.login-ecr.outputs.region }}"

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./scripts/env/production/version.sh
          ./scripts/env/production/version.sh -v Hotfix
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com

      - name: Deploy API image to Amazon ECS
        run: |
          set -e
          docker pull ${{ steps.login-ecr.outputs.registry }}/api-repo:latest${{ github.sha }}
          # Additional steps for deploying API image to ECS go here

      - name: Deploy Frontend image to Amazon ECS
        run: |
          set -e
          docker pull ${{ steps.login-ecr.outputs.registry }}/frontend-repo:latest${{ github.sha }}
          # Additional steps for deploying Frontend image to ECS go here
